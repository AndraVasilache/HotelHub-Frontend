NPM-INSTALL(1)                                                  NPM-INSTALL(1)

NNAAMMEE
       nnppmm--iinnssttaallll - Install a package

   SSyynnooppssiiss
         npm install (with no args, in package dir)
         npm install [<@scope>/]<name>
         npm install [<@scope>/]<name>@<tag>
         npm install [<@scope>/]<name>@<version>
         npm install [<@scope>/]<name>@<version range>
         npm install <alias>@npm:<name>
         npm install <git-host>:<git-user>/<repo-name>
         npm install <git repo url>
         npm install <tarball file>
         npm install <tarball url>
         npm install <folder>

         aliases: npm i, npm add
         common options: [-P|--save-prod|-D|--save-dev|-O|--save-optional] [-E|--save-exact] [-B|--save-bundle] [--no-save] [--dry-run]

   DDeessccrriippttiioonn
       This  command  installs a package, and any packages that it depends on.
       If the package has a package-lock or shrinkwrap file, the  installation
       of  dependencies  will  be  driven by that, with an nnppmm--sshhrriinnkkwwrraapp..jjssoonn
       taking precedence if both files exist. See npm  help  package-lock.json
       and npm help sshhrriinnkkwwrraapp.

       A ppaacckkaaggee is:

       • a) a folder containing a program described by a npm help ppaacckkaaggee..jjssoonn
         file

       • b) a gzipped tarball containing (a)

       • c) a url that resolves to (b)

       • d) a <<nnaammee>>@@<<vveerrssiioonn>> that is published on the registry (see npm help
         rreeggiissttrryy) with (c)

       • e) a <<nnaammee>>@@<<ttaagg>> (see npm help ddiisstt--ttaagg) that points to (d)

       • f) a <<nnaammee>> that has a "latest" tag satisfying (e)

       • g) a <<ggiitt rreemmoottee uurrll>> that resolves to (a)

       Even if you never publish your package, you can still get a lot of ben‐
       efits of using npm if you just want to write a node  program  (a),  and
       perhaps  if you also want to be able to easily install it elsewhere af‐
       ter packing it up into a tarball (b).

       • nnppmm iinnssttaallll (in package directory, no arguments):
           Install the dependencies in the local node_modules folder.
           In global mode (ie, with --gg or ----gglloobbaall appended to the command),
           it installs the current package context (ie, the current working
           directory) as a global package.
           By default, nnppmm iinnssttaallll will install all modules listed  as  depen‐
         dencies
           in npm help ppaacckkaaggee..jjssoonn.
           With  the ----pprroodduuccttiioonn flag (or when the NNOODDEE__EENNVV environment vari‐
         able
           is set to pprroodduuccttiioonn), npm will not install modules listed in
           ddeevvDDeeppeennddeenncciieess. To install all modules listed in both ddeeppeennddeenncciieess
           and ddeevvDDeeppeennddeenncciieess when NNOODDEE__EENNVV environment variable  is  set  to
         pprroodduuccttiioonn,
           you can use ----pprroodduuccttiioonn==ffaallssee.  NOTE: The ----pprroodduuccttiioonn flag has no
         particular meaning when adding a
           dependency to a project.

       • nnppmm iinnssttaallll <<ffoollddeerr>>:
           Install the package in the directory as a symlink  in  the  current
         project.
           Its  dependencies will be installed before it's linked. If <<ffoollddeerr>>
         sits
           inside the root of your project, its dependencies may be hoisted to
         the
           toplevel  nnooddee__mmoodduulleess  as  they would for other types of dependen‐
         cies.

       • nnppmm iinnssttaallll <<ttaarrbbaallll ffiillee>>:
           Install a package that is sitting on the filesystem.  Note: if  you
         just want
           to  link  a  dev directory into your npm root, you can do this more
         easily by
           using nnppmm lliinnkk.
           Tarball requirements:

         • The filename _m_u_s_t use ..ttaarr, ..ttaarr..ggzz, or ..ttggzz as the extension.

         • The package contents should reside in a subfolder inside  the  tar‐
           ball  (usually  it  is  called  ppaacckkaaggee//). npm strips one directory
           layer  when  installing  the  package  (an  equivalent  of  ttaarr   xx
           ----ssttrriipp--ccoommppoonneennttss==11 is run).

         • The  package must contain a ppaacckkaaggee..jjssoonn file with nnaammee and vveerrssiioonn
           properties.  Example:

           npm install ./package.tgz

       • nnppmm iinnssttaallll <<ttaarrbbaallll uurrll>>:
           Fetch the tarball url, and then install it.  In  order  to  distin‐
         guish between
           this  and  other options, the argument must start with "http://" or
         "https://"
           Example:

             npm install https://github.com/indexzero/forever/tarball/v0.5.6

       • nnppmm iinnssttaallll [[<<@@ssccooppee>>//]]<<nnaammee>>:
           Do a <<nnaammee>>@@<<ttaagg>> install, where <<ttaagg>> is the "tag" config. (See
           npm help ccoonnffiigg. The config's default value is llaatteesstt.)
           In most cases, this will install the version of the modules  tagged
         as
           llaatteesstt on the npm registry.
           Example:

             npm install sax

       • nnppmm iinnssttaallll <<aalliiaass>>@@nnppmm::<<nnaammee>>:
           Install a package under a custom alias. Allows multiple versions of
           a same-name package side-by-side, more convenient import names for
           packages with otherwise long ones and using git forks replacements
           or forked npm packages as replacements. Aliasing works only on your
           project and does not rename packages in transitive dependencies.
           Aliases should follow the naming conventions stated in
           vvaalliiddaattee--nnppmm--ppaacckkaaggee--nnaammee       _h_t_t_p_s_:_/_/_w_w_w_._n_p_m_j_s_._c_o_m_/_p_a_c_k_a_g_e_/_v_a_l_i_‐
         _d_a_t_e_-_n_p_m_-_p_a_c_k_a_g_e_-_n_a_m_e_#_n_a_m_i_n_g_-_r_u_l_e_s.
           Examples:

             npm install my-react@npm:react
             npm install jquery2@npm:jquery@2
             npm install jquery3@npm:jquery@3
             npm install npa@npm:npm-package-arg

         `npm install` saves any specified packages into `dependencies` by default.
         Additionally, you can control where and how they get saved with some
         additional flags:

         * `-P, --save-prod`: Package will appear in your `dependencies`. This is the
                              default unless `-D` or `-O` are present.

         * `-D, --save-dev`: Package will appear in your `devDependencies`.

         * `-O, --save-optional`: Package will appear in your `optionalDependencies`.

         * `--no-save`: Prevents saving to `dependencies`.

         When using any of the above options to save dependencies to your
         package.json, there are two additional, optional flags:

         * `-E, --save-exact`: Saved dependencies will be configured with an
           exact version rather than using npm's default semver range
           operator.

         * `-B, --save-bundle`: Saved dependencies will also be added to your `bundleDependencies` list.

         Further, if you have an `npm-shrinkwrap.json` or `package-lock.json` then it
         will be updated as well.

         `<scope>` is optional. The package will be downloaded from the registry
         associated with the specified scope. If no registry is associated with
         the given scope the default registry is assumed. See npm help `scope`.

         Note: if you do not include the @-symbol on your scope name, npm will
         interpret this as a GitHub repository instead, see below. Scopes names
         must also be followed by a slash.

         Examples:

         ```bash
         npm install sax
         npm install githubname/reponame
         npm install @myorg/privatepackage
         npm install node-tap --save-dev
         npm install dtrace-provider --save-optional
         npm install readable-stream --save-exact
         npm install ansi-regex --save-bundle
         ```

         **Note**: If there is a file or folder named `<name>` in the current
         working directory, then it will try to install that, and only try to
         fetch the package by name if it is not valid.

       • nnppmm iinnssttaallll [[<<@@ssccooppee>>//]]<<nnaammee>>@@<<ttaagg>>:
           Install the version of the package that is referenced by the speci‐
         fied tag.
           If  the  tag  does not exist in the registry data for that package,
         then this
           will fail.
           Example:

           npm install sax@latest
           npm install @myorg/mypackage@latest

       • nnppmm iinnssttaallll [[<<@@ssccooppee>>//]]<<nnaammee>>@@<<vveerrssiioonn>>:
           Install the specified version of the package.  This  will  fail  if
         the
           version has not been published to the registry.
           Example:

           npm install sax@0.1.1
           npm install @myorg/privatepackage@1.5.0

       • nnppmm iinnssttaallll [[<<@@ssccooppee>>//]]<<nnaammee>>@@<<vveerrssiioonn rraannggee>>:
           Install  a  version  of  the package matching the specified version
         range.  This
           will follow the same rules for resolving dependencies described  in
         npm help ppaacckkaaggee..jjssoonn.
           Note  that  most  version ranges must be put in quotes so that your
         shell will
           treat it as a single argument.
           Example:

           npm install sax@">=0.1.0 <0.2.0"
           npm install @myorg/privatepackage@">=0.1.0 <0.2.0"

       • nnppmm iinnssttaallll <<ggiitt rreemmoottee uurrll>>:
           Installs the package from the hosted git provider, cloning it  with
         ggiitt.
           For a full git remote url, only that URL will be attempted.

             <protocol>://[<user>[:<password>]@]<hostname>[:<port>][:][/]<path>[#<commit-ish> | #semver:<semver>]
         <<pprroottooccooll>> is one of ggiitt, ggiitt++sssshh, ggiitt++hhttttpp, ggiitt++hhttttppss, or
         ggiitt++ffiillee.
         If ##<<ccoommmmiitt--iisshh>> is provided, it will be used to clone exactly that
         commit.  If  the commit-ish has the format ##sseemmvveerr::<<sseemmvveerr>>, <<sseemmvveerr>>
       can
         be any valid semver range or exact version, and npm will look for any
       tags
         or  refs  matching  that  range  in the remote repository, much as it
       would for a
         registry dependency. If neither ##<<ccoommmmiitt--iisshh>> or ##sseemmvveerr::<<sseemmvveerr>> is
         specified, then the default branch of the repository is used.
         If the repository makes use of submodules, those submodules  will  be
       cloned
         as well.
         If the package being installed contains a pprreeppaarree script, its
         ddeeppeennddeenncciieess and ddeevvDDeeppeennddeenncciieess will be installed, and the prepare
         script will be run, before the package is packaged and installed.
         The  following  git  environment  variables are recognized by npm and
       will be
         added to the environment when running git:

              • GGIITT__AASSKKPPAASSSS

              • GGIITT__EEXXEECC__PPAATTHH

              • GGIITT__PPRROOXXYY__CCOOMMMMAANNDD

              • GGIITT__SSSSHH

              • GGIITT__SSSSHH__CCOOMMMMAANNDD

              • GGIITT__SSSSLL__CCAAIINNFFOO

              • GGIITT__SSSSLL__NNOO__VVEERRIIFFYY See the git man page for details.  Examples:

                npm install git+ssh://git@github.com:npm/cli.git#v1.0.27
                npm install git+ssh://git@github.com:npm/cli#semver:^5.0
                npm install git+https://isaacs@github.com/npm/cli.git
                npm install git://github.com/npm/cli.git#v1.0.27
                GIT_SSH_COMMAND='ssh -i ~/.ssh/custom_ident' npm install git+ssh://git@github.com:npm/cli.git

       • nnppmm iinnssttaallll <<ggiitthhuubbnnaammee>>//<<ggiitthhuubbrreeppoo>>[[##<<ccoommmmiitt--iisshh>>]]:

       • nnppmm iinnssttaallll ggiitthhuubb::<<ggiitthhuubbnnaammee>>//<<ggiitthhuubbrreeppoo>>[[##<<ccoommmmiitt--iisshh>>]]:
           Install the package at hhttttppss::////ggiitthhuubb..ccoomm//ggiitthhuubbnnaammee//ggiitthhuubbrreeppoo by
           attempting to clone it using ggiitt.
           If ##<<ccoommmmiitt--iisshh>> is provided, it will be used to clone exactly that
           commit. If the commit-ish has the format ##sseemmvveerr::<<sseemmvveerr>>, <<sseemmvveerr>>
         can
           be  any  valid semver range or exact version, and npm will look for
         any tags
           or refs matching that range in the remote repository,  much  as  it
         would for a
           registry  dependency.  If neither ##<<ccoommmmiitt--iisshh>> or ##sseemmvveerr::<<sseemmvveerr>>
         is
           specified, then mmaasstteerr is used.
           As with regular git dependencies, ddeeppeennddeenncciieess and  ddeevvDDeeppeennddeenncciieess
         will
           be  installed if the package has a pprreeppaarree script, before the pack‐
         age is
           done installing.
           Examples:

           npm install mygithubuser/myproject
           npm install github:mygithubuser/myproject

       • nnppmm            iinnssttaallll            ggiisstt::[[<<ggiitthhuubbnnaammee>>//]]<<ggiissttIIDD>>[[##<<ccoomm‐‐
         mmiitt--iisshh>>||##sseemmvveerr::<<sseemmvveerr>>]]:
           Install the package at hhttttppss::////ggiisstt..ggiitthhuubb..ccoomm//ggiissttIIDD by attempting
         to
           clone it using ggiitt. The GitHub username associated with the gist is
           optional and will not be saved in ppaacckkaaggee..jjssoonn.
           As with regular git dependencies, ddeeppeennddeenncciieess and  ddeevvDDeeppeennddeenncciieess
         will
           be  installed if the package has a pprreeppaarree script, before the pack‐
         age is
           done installing.
           Example:

           npm install gist:101a11beef

       • nnppmm iinnssttaallll bbiittbbuucckkeett::<<bbiittbbuucckkeettnnaammee>>//<<bbiittbbuucckkeettrreeppoo>>[[##<<ccoommmmiitt--iisshh>>]]:
           Install the package at hhttttppss::////bbiittbbuucckkeett..oorrgg//bbiittbbuucckkeettnnaammee//bbiittbbuucckk‐‐
         eettrreeppoo
           by attempting to clone it using ggiitt.
           If ##<<ccoommmmiitt--iisshh>> is provided, it will be used to clone exactly that
           commit. If the commit-ish has the format ##sseemmvveerr::<<sseemmvveerr>>, <<sseemmvveerr>>
         can
           be any valid semver range or exact version, and npm will  look  for
         any tags
           or  refs  matching  that range in the remote repository, much as it
         would for a
           registry dependency. If neither ##<<ccoommmmiitt--iisshh>>  or  ##sseemmvveerr::<<sseemmvveerr>>
         is
           specified, then mmaasstteerr is used.
           As  with regular git dependencies, ddeeppeennddeenncciieess and ddeevvDDeeppeennddeenncciieess
         will
           be installed if the package has a pprreeppaarree script, before the  pack‐
         age is
           done installing.
           Example:

           npm install bitbucket:mybitbucketuser/myproject

       • nnppmm iinnssttaallll ggiittllaabb::<<ggiittllaabbnnaammee>>//<<ggiittllaabbrreeppoo>>[[##<<ccoommmmiitt--iisshh>>]]:
           Install the package at hhttttppss::////ggiittllaabb..ccoomm//ggiittllaabbnnaammee//ggiittllaabbrreeppoo
           by attempting to clone it using ggiitt.
           If ##<<ccoommmmiitt--iisshh>> is provided, it will be used to clone exactly that
           commit. If the commit-ish has the format ##sseemmvveerr::<<sseemmvveerr>>, <<sseemmvveerr>>
         can
           be any valid semver range or exact version, and npm will  look  for
         any tags
           or  refs  matching  that range in the remote repository, much as it
         would for a
           registry dependency. If neither ##<<ccoommmmiitt--iisshh>>  or  ##sseemmvveerr::<<sseemmvveerr>>
         is
           specified, then mmaasstteerr is used.
           As  with regular git dependencies, ddeeppeennddeenncciieess and ddeevvDDeeppeennddeenncciieess
         will
           be installed if the package has a pprreeppaarree script, before the  pack‐
         age is
           done installing.
           Example:

           npm install gitlab:mygitlabuser/myproject
           npm install gitlab:myusr/myproj#semver:^5.0

       You  may  combine  multiple arguments, and even multiple types of argu‐
       ments.  For example:

         npm install sax@">=0.1.0 <0.2.0" bench supervisor

       The ----ttaagg argument will apply to all of the specified install  targets.
       If  a  tag  with the given name exists, the tagged version is preferred
       over newer versions.

       The ----ddrryy--rruunn argument will report in the usual way  what  the  install
       would have done without actually installing anything.

       The   ----ppaacckkaaggee--lloocckk--oonnllyy   argument   will   only   update  the  ppaacckk‐‐
       aaggee--lloocckk..jjssoonn, instead of checking nnooddee__mmoodduulleess and downloading  depen‐
       dencies.

       The  --ff  or  ----ffoorrccee  argument will force npm to fetch remote resources
       even if a local copy exists on disk.

         npm install sax --force

       The ----nnoo--ffuunndd argument will hide the message displayed at  the  end  of
       each  install  that acknowledges the number of dependencies looking for
       funding.  See nnppmm--ffuunndd((11))

       The --gg or ----gglloobbaall argument will cause npm to install the package glob‐
       ally rather than locally.  See npm help folders.

       The  ----gglloobbaall--ssttyyllee argument will cause npm to install the package into
       your local nnooddee__mmoodduulleess folder with the same layout it  uses  with  the
       global  nnooddee__mmoodduulleess folder. Only your direct dependencies will show in
       nnooddee__mmoodduulleess and everything they depend on will be flattened  in  their
       nnooddee__mmoodduulleess folders. This obviously will eliminate some deduping.

       The ----iiggnnoorree--ssccrriippttss argument will cause npm to not execute any scripts
       defined in the package.json. See npm help ssccrriippttss.

       The ----lleeggaaccyy--bbuunnddlliinngg argument will cause npm to  install  the  package
       such  that  versions of npm prior to 1.4, such as the one included with
       node 0.8, can install the package. This eliminates all automatic dedup‐
       ing.

       The ----lliinnkk argument will cause npm to link global installs into the lo‐
       cal space in some cases.

       The ----nnoo--bbiinn--lliinnkkss argument will prevent npm from creating symlinks for
       any binaries the package might contain.

       The  ----nnoo--ooppttiioonnaall argument will prevent optional dependencies from be‐
       ing installed.

       The ----nnoo--sshhrriinnkkwwrraapp argument, which will ignore  an  available  package
       lock or shrinkwrap file and use the package.json instead.

       The  ----nnoo--ppaacckkaaggee--lloocckk  argument will prevent npm from creating a ppaacckk‐‐
       aaggee--lloocckk..jjssoonn file.  When running with package-lock's disabled npm will
       not automatically prune your node modules when installing.

       The  ----nnooddeeddiirr==//ppaatthh//ttoo//nnooddee//ssoouurrccee argument will allow npm to find the
       node source code so that npm can compile native modules.

       The ----oonnllyy=={{pprroodd[[uuccttiioonn]]||ddeevv[[eellooppmmeenntt]]}} argument will cause either only
       ddeevvDDeeppeennddeenncciieess  or only non-ddeevvDDeeppeennddeenncciieess to be installed regardless
       of the NNOODDEE__EENNVV.

       The ----nnoo--aauuddiitt argument can be used to disable sending of audit reports
       to  the  configured registries.  See nnppmm--aauuddiitt _n_p_m_-_a_u_d_i_t for details on
       what is sent.

       See npm help ccoonnffiigg.  Many of the configuration params have some effect
       on installation, since that's most of what npm does.

   AAllggoorriitthhmm
       To install a package, npm uses the following algorithm:

         load the existing node_modules tree from disk
         clone the tree
         fetch the package.json and assorted metadata and add it to the clone
         walk the clone and add any missing dependencies
           dependencies will be added as close to the top as is possible
           without breaking any other modules
         compare the original tree with the cloned tree and make a list of
         actions to take to convert one to the other
         execute all of the actions, deepest first
           kinds of actions are install, update, remove and move

       For  this  ppaacckkaaggee{{ddeepp}}  structure:  AA{{BB,,CC}},, BB{{CC}},, CC{{DD}}, this algorithm
       produces:

         A
         +-- B
         +-- C
         +-- D

       That is, the dependency from B to C is satisfied by the fact that A al‐
       ready  caused C to be installed at a higher level. D is still installed
       at the top level because nothing conflicts with it.

       For AA{{BB,,CC}},, BB{{CC,,DD@@11}},, CC{{DD@@22}}, this algorithm produces:

         A
         +-- B
         +-- C
            `-- D@2
         +-- D@1

       Because B's D@1 will be installed in the top level, C now  has  to  in‐
       stall  D@2  privately  for itself. This algorithm is deterministic, but
       different trees may be produced if two dependencies are  requested  for
       installation in a different order.

       See  npm  help  folders for a more detailed description of the specific
       folder structures that npm creates.

   LLiimmiittaattiioonnss ooff nnppmm''ss IInnssttaallll AAllggoorriitthhmm
       npm will refuse to install any package with an identical  name  to  the
       current  package.  This can be overridden with the ----ffoorrccee flag, but in
       most cases can simply be addressed by changing the local package name.

       There are some very rare and pathological edge-cases where a cycle  can
       cause  npm  to try to install a never-ending tree of packages.  Here is
       the simplest case:

         A -> B -> A' -> B' -> A -> B -> A' -> B' -> A -> ...

       where AA is some version of a package, and AA'' is a different version  of
       the  same  package.  Because BB depends on a different version of AA than
       the one that is already in the tree, it must install a  separate  copy.
       The  same  is true of AA'', which must install BB''.  Because BB'' depends on
       the original version of AA, which has been overridden, the  cycle  falls
       into infinite regress.

       To  avoid this situation, npm flat-out refuses to install any nnaammee@@vveerr‐‐
       ssiioonn that is already present anywhere in the tree of package folder an‐
       cestors.   A  more correct, but more complex, solution would be to sym‐
       link the existing version into the new location.  If this ever  affects
       a real use-case, it will be investigated.

   SSeeee AAllssoo
       • npm help folders

       • npm help update

       • npm help audit

       • npm help fund

       • npm help link

       • npm help rebuild

       • npm help scripts

       • npm help build

       • npm help config

       • npm help npmrc

       • npm help registry

       • npm help dist-tag

       • npm help uninstall

       • npm help shrinkwrap

       • npm help package.json

                                  April 2020                    NPM-INSTALL(1)
