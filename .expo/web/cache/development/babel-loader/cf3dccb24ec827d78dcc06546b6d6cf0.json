{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/mira/Desktop/hotelhub_frontend/App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { NavigationContainer } from '@react-navigation/native';\nimport HomeScreen from \"./src/screens/HomeScreen\";\nimport LoginScreen from \"./src/screens/LoginScreen\";\nimport CreateAccount from \"./src/screens/CreateAccountScreen\";\nimport { createStackNavigator } from 'react-navigation-stack';\nimport Router from \"./src/utils/Router\";\nvar PERSISTENCE_KEY = 'NAVIGATION_STATE';\nexport default function App() {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isReady = _React$useState2[0],\n      setIsReady = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      initialState = _React$useState4[0],\n      setInitialState = _React$useState4[1];\n\n  React.useEffect(function () {\n    var restoreState = function restoreState() {\n      var initialUrl, savedStateString, state;\n      return _regeneratorRuntime.async(function restoreState$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Linking.getInitialURL());\n\n            case 3:\n              initialUrl = _context.sent;\n\n              if (!(Platform.OS !== 'web' && initialUrl == null)) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(PERSISTENCE_KEY));\n\n            case 7:\n              savedStateString = _context.sent;\n              state = savedStateString ? JSON.parse(savedStateString) : undefined;\n\n              if (state !== undefined) {\n                setInitialState(state);\n              }\n\n            case 10:\n              _context.prev = 10;\n              setIsReady(true);\n              return _context.finish(10);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0,, 10, 13]], Promise);\n    };\n\n    if (!isReady) {\n      restoreState();\n    }\n  }, [isReady]);\n\n  if (!isReady) {\n    return null;\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(NavigationContainer, {\n    initialState: initialState,\n    onStateChange: function onStateChange(state) {\n      return AsyncStorage.setItem(PERSISTENCE_KEY, JSON.stringify(state));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/home/mira/Desktop/hotelhub_frontend/App.js"],"names":["React","AsyncStorage","NavigationContainer","HomeScreen","LoginScreen","CreateAccount","createStackNavigator","Router","PERSISTENCE_KEY","App","useState","isReady","setIsReady","initialState","setInitialState","useEffect","restoreState","Linking","getInitialURL","initialUrl","Platform","OS","getItem","savedStateString","state","JSON","parse","undefined","setItem","stringify"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAEA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,UAAP;AACA,OAAOC,WAAP;AACA,OAAOC,aAAP;AACA,SAASC,oBAAT,QAAqC,wBAArC;AACA,OAAOC,MAAP;AAEA,IAAMC,eAAe,GAAG,kBAAxB;AAEA,eAAe,SAASC,GAAT,GAAe;AAC5B,wBAA8BT,KAAK,CAACU,QAAN,CAAe,KAAf,CAA9B;AAAA;AAAA,MAAOC,OAAP;AAAA,MAAgBC,UAAhB;;AACA,yBAAwCZ,KAAK,CAACU,QAAN,EAAxC;AAAA;AAAA,MAAOG,YAAP;AAAA,MAAqBC,eAArB;;AAEAd,EAAAA,KAAK,CAACe,SAAN,CAAgB,YAAM;AACpB,QAAMC,YAAY,GAAG,SAAfA,YAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEQC,OAAO,CAACC,aAAR,EAFR;;AAAA;AAEXC,cAAAA,UAFW;;AAAA,oBAIbC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,IAAyBF,UAAU,IAAI,IAJ1B;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAMgBlB,YAAY,CAACqB,OAAb,CAAqBd,eAArB,CANhB;;AAAA;AAMTe,cAAAA,gBANS;AAOTC,cAAAA,KAPS,GAODD,gBAAgB,GAAGE,IAAI,CAACC,KAAL,CAAWH,gBAAX,CAAH,GAAkCI,SAPjD;;AASf,kBAAIH,KAAK,KAAKG,SAAd,EAAyB;AACvBb,gBAAAA,eAAe,CAACU,KAAD,CAAf;AACD;;AAXc;AAAA;AAcjBZ,cAAAA,UAAU,CAAC,IAAD,CAAV;AAdiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArB;;AAkBA,QAAI,CAACD,OAAL,EAAc;AACZK,MAAAA,YAAY;AACb;AACF,GAtBD,EAsBG,CAACL,OAAD,CAtBH;;AAwBA,MAAI,CAACA,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;;AAED,SACE,0CACE,oBAAC,mBAAD;AACE,IAAA,YAAY,EAAEE,YADhB;AAEE,IAAA,aAAa,EAAE,uBAACW,KAAD;AAAA,aAAWvB,YAAY,CAAC2B,OAAb,CAAqBpB,eAArB,EAAsCiB,IAAI,CAACI,SAAL,CAAeL,KAAf,CAAtC,CAAX;AAAA,KAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF,CADF;AAeD","sourcesContent":["import * as React from 'react';\nimport { Linking, Platform } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { NavigationContainer } from '@react-navigation/native';\nimport HomeScreen from './src/screens/HomeScreen';\nimport LoginScreen from './src/screens/LoginScreen';\nimport CreateAccount from './src/screens/CreateAccountScreen';\nimport { createStackNavigator } from 'react-navigation-stack';\nimport Router from \"./src/utils/Router\";\n\nconst PERSISTENCE_KEY = 'NAVIGATION_STATE';\n\nexport default function App() {\n  const [isReady, setIsReady] = React.useState(false);\n  const [initialState, setInitialState] = React.useState();\n\n  React.useEffect(() => {\n    const restoreState = async () => {\n      try {\n        const initialUrl = await Linking.getInitialURL();\n\n        if (Platform.OS !== 'web' && initialUrl == null) {\n          // Only restore state if there's no deep link and we're not on web\n          const savedStateString = await AsyncStorage.getItem(PERSISTENCE_KEY);\n          const state = savedStateString ? JSON.parse(savedStateString) : undefined;\n\n          if (state !== undefined) {\n            setInitialState(state);\n          }\n        }\n      } finally {\n        setIsReady(true);\n      }\n    };\n\n    if (!isReady) {\n      restoreState();\n    }\n  }, [isReady]);\n\n  if (!isReady) {\n    return null;\n  }\n\n  return (\n    <>\n      <NavigationContainer\n        initialState={initialState}\n        onStateChange={(state) => AsyncStorage.setItem(PERSISTENCE_KEY, JSON.stringify(state))}>\n\n        {/* <Stack.Navigator initialRouteName=\"Home\">\n          <Stack.Screen name=\"Home\" component={HomeScreen} />\n          <Stack.Screen name=\"Login\" component={LoginScreen} />\n          <Stack.Screen name=\"CreateAccount\" component={CreateAccount} />\n        </Stack.Navigator> */}\n        <Router/>\n      </NavigationContainer>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}