{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/mira/Desktop/hotelhub_frontend/node_modules/react-native-input-validator/src/InputValidator.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport PropTypes from \"prop-types\";\nimport validator from \"validator\";\nimport { Style } from \"../style\";\n\nvar InputValidator = function (_Component) {\n  _inherits(InputValidator, _Component);\n\n  var _super = _createSuper(InputValidator);\n\n  function InputValidator(props) {\n    var _this;\n\n    _classCallCheck(this, InputValidator);\n\n    _this = _super.call(this, props);\n\n    var value = _this.parseValue(_this.props.value);\n\n    _this.state = {\n      value: value,\n      validated: true\n    };\n    return _this;\n  }\n\n  _createClass(InputValidator, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (typeof this.props.onRef === \"function\") {\n        this.props.onRef(this._isMounted ? this : undefined);\n      }\n\n      var props_value = this.parseValue(this.props.value);\n      var state_value = this.parseValue();\n\n      if (this.props.value == null) {} else if (prevProps.value !== this.props.value) {\n        this.validate(props_value);\n      } else if (prevState.value !== state_value) {\n        this.validate();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._isMounted = true;\n\n      if (typeof this.props.onRef === \"function\") {\n        this.props.onRef(this);\n      }\n\n      this.validate();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n\n      if (typeof this.props.onRef === \"function\") {\n        this.props.onRef(undefined);\n      }\n    }\n  }, {\n    key: \"getLocale\",\n    value: function getLocale() {\n      return this.props.locale != null ? this.props.locale : \"any\";\n    }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return this.props.type != null ? this.props.type : \"\";\n    }\n  }, {\n    key: \"parseValue\",\n    value: function parseValue() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (value == null) {\n        value = this.state.value;\n      }\n\n      value = value == null ? \"\" : value;\n      value = String(value).trim();\n      return value;\n    }\n  }, {\n    key: \"parseNum\",\n    value: function parseNum(num) {\n      if (this.typeNumeric()) {\n        num = parseInt(num);\n      }\n\n      if (isNaN(num)) {\n        num = 0;\n      }\n\n      return num;\n    }\n  }, {\n    key: \"isValidated\",\n    value: function isValidated() {\n      return this.state.validated;\n    }\n  }, {\n    key: \"typeNumeric\",\n    value: function typeNumeric() {\n      return this.props.type === \"int\" || this.props.type === \"integer\" || this.props.type === \"numeric\" || this.props.type === \"float\" || this.props.type === \"decimal\" || this.props.type === \"real\";\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var is_valid = true;\n      var text = this.parseValue(value).trim();\n\n      switch (this.getType()) {\n        case \"email\":\n          if (!validator.isEmail(text)) {\n            is_valid = false;\n          }\n\n          break;\n\n        case \"phone\":\n          if (!validator.isMobilePhone(text, this.getLocale())) {\n            is_valid = false;\n          }\n\n          break;\n\n        case \"currency\":\n          if (!validator.isCurrency(text, {\n            symbol: this.props.symbol\n          })) {\n            is_valid = false;\n          }\n\n          break;\n\n        case \"postal-code\":\n          if (!validator.isPostalCode(text, this.getLocale())) {\n            is_valid = false;\n          }\n\n          break;\n\n        case \"hex-color\":\n          if (!validator.isHexColor(text)) {\n            is_valid = false;\n          }\n\n          break;\n\n        case \"identity-card\":\n          if (!validator.isIdentityCard(text, this.getLocale())) {\n            is_valid = false;\n          }\n\n          break;\n\n        case \"credit-card\":\n          if (!validator.isCreditCard(text)) {\n            is_valid = false;\n          }\n\n          break;\n\n        case \"url\":\n          if (!validator.isURL(text)) {\n            is_valid = false;\n          }\n\n          break;\n\n        case \"numeric\":\n          if (!this.isNumeric(text) && !validator.isNumeric(text)) {\n            is_valid = false;\n          }\n\n          break;\n\n        case \"integer\":\n        case \"int\":\n          if (!this.isNumeric(text) && !validator.isNumeric(text)) {\n            is_valid = false;\n          }\n\n          break;\n\n        case \"real\":\n        case \"float\":\n          if (!this.isNumeric(text) && !validator.isFloat(text)) {\n            is_valid = false;\n          }\n\n          break;\n\n        case \"decimal\":\n          if (!this.isNumeric(text) && !validator.isDecimal(text)) {\n            is_valid = false;\n          }\n\n          break;\n\n        case \"alpha\":\n          if (!validator.isAlpha(text)) {\n            is_valid = false;\n          }\n\n          break;\n\n        case \"alphanumeric\":\n          if (!validator.isAlphanumeric(text)) {\n            is_valid = false;\n          }\n\n          break;\n      }\n\n      if (validator.isEmpty(text)) {\n        is_valid = !this.props.required;\n      }\n\n      return is_valid;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var text = this.parseValue(value);\n      var valid = this.isValid(text);\n      this.setState({\n        value: text,\n        validated: valid\n      });\n      return valid;\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.input.blur();\n      Keyboard.dismiss();\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.input.focus();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.input.update();\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.input.clear();\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus(event, refName) {\n      if (this.props.onFocus) {\n        this.props.onFocus(event, refName);\n      }\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur() {\n      Keyboard.dismiss();\n\n      if (this.props.onBlur) {\n        this.props.onBlur(arguments);\n      }\n    }\n  }, {\n    key: \"onChangeText\",\n    value: function onChangeText(text) {\n      this.validate(text);\n\n      if (this.props.onChangeText) {\n        var value = text;\n\n        if (this.typeNumeric()) {\n          value = this.parseNum(value);\n        }\n\n        this.props.onChangeText(value);\n      }\n    }\n  }, {\n    key: \"onEndEditing\",\n    value: function onEndEditing(event) {\n      Keyboard.dismiss();\n\n      if (this.props.onEndEditing) {\n        this.props.onEndEditing(event);\n      }\n    }\n  }, {\n    key: \"isNumeric\",\n    value: function isNumeric(n) {\n      return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n  }, {\n    key: \"isFocused\",\n    value: function isFocused() {\n      return this.input.isFocused();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var validStyle = this.props.styleValid ? this.props.validStyle : Style.valid;\n      var invalidStyle = this.props.styleInvalid ? this.props.invalidStyle : Style.invalid;\n\n      var props = _objectSpread(_objectSpread({}, this.props), {}, {\n        onBlur: this.onBlur.bind(this),\n        onChangeText: this.onChangeText.bind(this),\n        onEndEditing: this.onEndEditing.bind(this),\n        onFocus: this.onFocus.bind(this),\n        password: this.props.secureTextEntry || this.props.password,\n        secureTextEntry: this.props.secureTextEntry || this.props.password,\n        style: [Style.input, this.props.style]\n      });\n\n      if (!validator.isEmpty(this.parseValue())) {\n        props.style.push(this.state.validated ? validStyle : invalidStyle);\n      }\n\n      var keyboardType = \"default\";\n\n      if (this.typeNumeric()) {\n        keyboardType = \"numeric\";\n      }\n\n      if (this.props.type) {\n        switch (this.props.type) {\n          case \"email\":\n            keyboardType = \"email-address\";\n            break;\n\n          case \"int\":\n          case \"integer\":\n            keyboardType = \"number-pad\";\n            break;\n\n          case \"real\":\n          case \"float\":\n          case \"decimal\":\n            keyboardType = \"decimal-pad\";\n            break;\n\n          case \"phone\":\n            keyboardType = \"phone-pad\";\n            break;\n        }\n      }\n\n      delete props.children;\n      delete props.onRef;\n      delete props.ref;\n\n      if (props.editable === false) {\n        props.pointerEvents = \"none\";\n      }\n\n      return React.createElement(TextInput, _extends({\n        ref: function ref(r) {\n          _this2.input = r;\n        },\n        keyboardType: keyboardType,\n        autoFocus: false,\n        underlineColorAndroid: \"transparent\"\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 4\n        }\n      }));\n    }\n  }]);\n\n  return InputValidator;\n}(Component);\n\nInputValidator.propTypes = {\n  type: PropTypes.string,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  symbol: PropTypes.string,\n  locale: PropTypes.string,\n  onBlur: PropTypes.func,\n  onFocus: PropTypes.func,\n  onChangeText: PropTypes.func,\n  onEndEditing: PropTypes.func,\n  password: PropTypes.bool,\n  secureTextEntry: PropTypes.bool\n};\nInputValidator.defaultProps = {\n  type: \"default\"\n};\nexport default InputValidator;","map":{"version":3,"sources":["/home/mira/Desktop/hotelhub_frontend/node_modules/react-native-input-validator/src/InputValidator.js"],"names":["React","Component","PropTypes","validator","Style","InputValidator","props","value","parseValue","state","validated","prevProps","prevState","onRef","_isMounted","undefined","props_value","state_value","validate","locale","type","String","trim","num","typeNumeric","parseInt","isNaN","is_valid","text","getType","isEmail","isMobilePhone","getLocale","isCurrency","symbol","isPostalCode","isHexColor","isIdentityCard","isCreditCard","isURL","isNumeric","isFloat","isDecimal","isAlpha","isAlphanumeric","isEmpty","required","valid","isValid","setState","input","blur","Keyboard","dismiss","focus","update","clear","event","refName","onFocus","onBlur","arguments","onChangeText","parseNum","onEndEditing","n","parseFloat","isFinite","isFocused","validStyle","styleValid","invalidStyle","styleInvalid","invalid","bind","password","secureTextEntry","style","push","keyboardType","children","ref","editable","pointerEvents","r","propTypes","string","oneOfType","number","isRequired","func","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport {Keyboard, TextInput} from \"react-native\";\nimport PropTypes from \"prop-types\";\nimport validator from \"validator\";\nimport {Style} from \"../style\";\n\n/**\n * Input Text\n * @author Marco Cesarato <cesarato.developer@gmail.com>\n */\nclass InputValidator extends Component {\n\t/**\n\t * Constructor\n\t * @param props\n\t */\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tconst value = this.parseValue(this.props.value);\n\n\t\tthis.state = {\n\t\t\tvalue: value,\n\t\t\tvalidated: true,\n\t\t};\n\t}\n\n\t/**\n\t * Component did update\n\t * @param prevProps\n\t * @param prevState\n\t */\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tif (typeof this.props.onRef === \"function\") {\n\t\t\tthis.props.onRef(this._isMounted ? this : undefined);\n\t\t}\n\t\tconst props_value = this.parseValue(this.props.value);\n\t\tconst state_value = this.parseValue();\n\t\tif (this.props.value == null) {\n\t\t} else if (prevProps.value !== this.props.value) {\n\t\t\tthis.validate(props_value);\n\t\t} else if (prevState.value !== state_value) {\n\t\t\tthis.validate();\n\t\t}\n\t}\n\n\t/**\n\t * Component did mount\n\t */\n\tcomponentDidMount() {\n\t\tthis._isMounted = true;\n\t\tif (typeof this.props.onRef === \"function\") {\n\t\t\tthis.props.onRef(this);\n\t\t}\n\t\tthis.validate();\n\t}\n\n\t/**\n\t * Component did unmount\n\t */\n\tcomponentWillUnmount() {\n\t\tthis._isMounted = false;\n\t\tif (typeof this.props.onRef === \"function\") {\n\t\t\tthis.props.onRef(undefined);\n\t\t}\n\t}\n\n\t/**\n\t * Get locale\n\t * @returns {string}\n\t */\n\tgetLocale() {\n\t\treturn this.props.locale != null ? this.props.locale : \"any\";\n\t}\n\n\t/**\n\t * Get input type\n\t * @returns {string}\n\t */\n\tgetType() {\n\t\treturn this.props.type != null ? this.props.type : \"\";\n\t}\n\n\t/**\n\t * Null to empty\n\t * @param value\n\t * @returns string\n\t */\n\tparseValue(value = null) {\n\t\tif (value == null) {\n\t\t\tvalue = this.state.value;\n\t\t}\n\t\tvalue = value == null ? \"\" : value;\n\t\tvalue = String(value).trim();\n\t\treturn value;\n\t}\n\n\t/**\n\t * Parse number type\n\t * @param num\n\t * @returns {*}\n\t */\n\tparseNum(num) {\n\t\tif (this.typeNumeric()) {\n\t\t\tnum = parseInt(num);\n\t\t}\n\t\tif (isNaN(num)) {\n\t\t\tnum = 0;\n\t\t}\n\t\treturn num;\n\t}\n\n\t/**\n\t * Get if validate\n\t * @returns {boolean}\n\t */\n\tisValidated() {\n\t\treturn this.state.validated;\n\t}\n\n\t/**\n\t * Get if type is numeric\n\t */\n\ttypeNumeric() {\n\t\treturn (\n\t\t\tthis.props.type === \"int\" ||\n\t\t\tthis.props.type === \"integer\" ||\n\t\t\tthis.props.type === \"numeric\" ||\n\t\t\tthis.props.type === \"float\" ||\n\t\t\tthis.props.type === \"decimal\" ||\n\t\t\tthis.props.type === \"real\"\n\t\t);\n\t}\n\n\t/**\n\t * Is valid\n\t * @param value\n\t * @returns {boolean}\n\t */\n\tisValid(value = null) {\n\t\tlet is_valid = true;\n\t\tconst text = this.parseValue(value).trim();\n\n\t\tswitch (this.getType()) {\n\t\t\tcase \"email\":\n\t\t\t\tif (!validator.isEmail(text)) {\n\t\t\t\t\tis_valid = false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"phone\":\n\t\t\t\tif (!validator.isMobilePhone(text, this.getLocale())) {\n\t\t\t\t\tis_valid = false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"currency\":\n\t\t\t\tif (!validator.isCurrency(text, {symbol: this.props.symbol})) {\n\t\t\t\t\tis_valid = false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"postal-code\":\n\t\t\t\tif (!validator.isPostalCode(text, this.getLocale())) {\n\t\t\t\t\tis_valid = false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"hex-color\":\n\t\t\t\tif (!validator.isHexColor(text)) {\n\t\t\t\t\tis_valid = false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"identity-card\":\n\t\t\t\tif (!validator.isIdentityCard(text, this.getLocale())) {\n\t\t\t\t\tis_valid = false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"credit-card\":\n\t\t\t\tif (!validator.isCreditCard(text)) {\n\t\t\t\t\tis_valid = false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"url\":\n\t\t\t\tif (!validator.isURL(text)) {\n\t\t\t\t\tis_valid = false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"numeric\":\n\t\t\t\tif (!this.isNumeric(text) && !validator.isNumeric(text)) {\n\t\t\t\t\tis_valid = false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"integer\":\n\t\t\tcase \"int\":\n\t\t\t\tif (!this.isNumeric(text) && !validator.isNumeric(text)) {\n\t\t\t\t\tis_valid = false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"real\":\n\t\t\tcase \"float\":\n\t\t\t\tif (!this.isNumeric(text) && !validator.isFloat(text)) {\n\t\t\t\t\tis_valid = false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"decimal\":\n\t\t\t\tif (!this.isNumeric(text) && !validator.isDecimal(text)) {\n\t\t\t\t\tis_valid = false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"alpha\":\n\t\t\t\tif (!validator.isAlpha(text)) {\n\t\t\t\t\tis_valid = false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"alphanumeric\":\n\t\t\t\tif (!validator.isAlphanumeric(text)) {\n\t\t\t\t\tis_valid = false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (validator.isEmpty(text)) {\n\t\t\tis_valid = !this.props.required;\n\t\t}\n\n\t\treturn is_valid;\n\t}\n\n\t/**\n\t * Validate\n\t * @param value\n\t * @returns {boolean}\n\t */\n\tvalidate(value = null) {\n\t\tconst text = this.parseValue(value);\n\t\tconst valid = this.isValid(text);\n\t\tthis.setState({value: text, validated: valid});\n\t\treturn valid;\n\t}\n\n\t/**\n\t * Blur\n\t */\n\tblur() {\n\t\tthis.input.blur();\n\t\tKeyboard.dismiss();\n\t}\n\n\t/**\n\t * Focus\n\t */\n\tfocus() {\n\t\tthis.input.focus();\n\t}\n\n\t/**\n\t * Update\n\t */\n\tupdate() {\n\t\tthis.input.update();\n\t}\n\n\t/**\n\t * Clear\n\t */\n\tclear() {\n\t\tthis.input.clear();\n\t}\n\n\t/**\n\t * On Focus\n\t * @param event\n\t * @param refName\n\t */\n\tonFocus(event, refName) {\n\t\tif (this.props.onFocus) {\n\t\t\tthis.props.onFocus(event, refName);\n\t\t}\n\t}\n\n\t/**\n\t * On Blur\n\t */\n\tonBlur() {\n\t\tKeyboard.dismiss();\n\t\tif (this.props.onBlur) {\n\t\t\tthis.props.onBlur(arguments);\n\t\t}\n\t}\n\n\t/**\n\t * On Change Text\n\t * @param text\n\t */\n\tonChangeText(text) {\n\t\tthis.validate(text);\n\t\tif (this.props.onChangeText) {\n\t\t\tlet value = text;\n\t\t\tif (this.typeNumeric()) {\n\t\t\t\tvalue = this.parseNum(value);\n\t\t\t}\n\t\t\tthis.props.onChangeText(value);\n\t\t}\n\t}\n\n\t/**\n\t * On ending Editing\n\t * @param event\n\t */\n\tonEndEditing(event) {\n\t\tKeyboard.dismiss();\n\t\tif (this.props.onEndEditing) {\n\t\t\tthis.props.onEndEditing(event);\n\t\t}\n\t}\n\n\t/**\n\t * Detect if is numeric\n\t * @param n\n\t * @returns {boolean}\n\t */\n\tisNumeric(n) {\n\t\treturn !isNaN(parseFloat(n)) && isFinite(n);\n\t}\n\n\t/**\n\t * Is focused\n\t * @returns {*}\n\t */\n\tisFocused() {\n\t\treturn this.input.isFocused();\n\t}\n\n\t/**\n\t * Render\n\t * @returns {*}\n\t */\n\trender() {\n\t\tlet validStyle = this.props.styleValid\n\t\t\t? this.props.validStyle\n\t\t\t: Style.valid;\n\t\tlet invalidStyle = this.props.styleInvalid\n\t\t\t? this.props.invalidStyle\n\t\t\t: Style.invalid;\n\n\t\tlet props = {\n\t\t\t...this.props,\n\t\t\tonBlur: this.onBlur.bind(this),\n\t\t\tonChangeText: this.onChangeText.bind(this),\n\t\t\tonEndEditing: this.onEndEditing.bind(this),\n\t\t\tonFocus: this.onFocus.bind(this),\n\t\t\tpassword: this.props.secureTextEntry || this.props.password, // Compatibility\n\t\t\tsecureTextEntry: this.props.secureTextEntry || this.props.password, // Compatibility\n\t\t\tstyle: [Style.input, this.props.style],\n\t\t};\n\n\t\tif (!validator.isEmpty(this.parseValue())) {\n\t\t\tprops.style.push(this.state.validated ? validStyle : invalidStyle);\n\t\t}\n\n\t\tlet keyboardType = \"default\";\n\t\tif (this.typeNumeric()) {\n\t\t\tkeyboardType = \"numeric\";\n\t\t}\n\n\t\tif (this.props.type) {\n\t\t\tswitch (this.props.type) {\n\t\t\t\tcase \"email\":\n\t\t\t\t\tkeyboardType = \"email-address\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"int\":\n\t\t\t\tcase \"integer\":\n\t\t\t\t\tkeyboardType = \"number-pad\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"real\":\n\t\t\t\tcase \"float\":\n\t\t\t\tcase \"decimal\":\n\t\t\t\t\tkeyboardType = \"decimal-pad\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"phone\":\n\t\t\t\t\tkeyboardType = \"phone-pad\";\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tdelete props.children;\n\t\tdelete props.onRef;\n\t\tdelete props.ref;\n\n\t\tif (props.editable === false) {\n\t\t\tprops.pointerEvents = \"none\";\n\t\t}\n\n\t\treturn (\n\t\t\t<TextInput\n\t\t\t\tref={(r) => {\n\t\t\t\t\tthis.input = r;\n\t\t\t\t}}\n\t\t\t\tkeyboardType={keyboardType}\n\t\t\t\tautoFocus={false}\n\t\t\t\tunderlineColorAndroid={\"transparent\"}\n\t\t\t\t{...props}\n\t\t\t/>\n\t\t);\n\t}\n}\n\nInputValidator.propTypes = {\n\ttype: PropTypes.string,\n\tvalue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n\tsymbol: PropTypes.string,\n\tlocale: PropTypes.string,\n\tonBlur: PropTypes.func,\n\tonFocus: PropTypes.func,\n\tonChangeText: PropTypes.func,\n\tonEndEditing: PropTypes.func,\n\tpassword: PropTypes.bool,\n\tsecureTextEntry: PropTypes.bool,\n};\n\nInputValidator.defaultProps = {\n\ttype: \"default\",\n};\n\nexport default InputValidator;\n"]},"metadata":{},"sourceType":"module"}