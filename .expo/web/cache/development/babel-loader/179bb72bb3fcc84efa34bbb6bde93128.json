{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/mira/Desktop/hotelhub_frontend/node_modules/react-native-input-validator/src/InputValidatorPlaceholder.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Palette, Style, CleanStyle, DirtyStyle } from \"../style\";\nimport validator from \"validator\";\nimport InputValidator from \"./InputValidator\";\n\nvar InputValidatorPlaceholder = function (_InputValidator) {\n  _inherits(InputValidatorPlaceholder, _InputValidator);\n\n  var _super = _createSuper(InputValidatorPlaceholder);\n\n  function InputValidatorPlaceholder(props) {\n    var _this;\n\n    _classCallCheck(this, InputValidatorPlaceholder);\n\n    _this = _super.call(this, props);\n\n    var value = _this.parseValue(_this.props.value);\n\n    var dirty = !validator.isEmpty(value);\n    _this.styles = dirty ? DirtyStyle : CleanStyle;\n    _this.state = _objectSpread(_objectSpread({}, _this.state), {}, {\n      dirty: dirty\n    });\n    return _this;\n  }\n\n  _createClass(InputValidatorPlaceholder, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.setState({\n        labelStyle: this.getLabelStyle()\n      }, function () {\n        _get(_getPrototypeOf(InputValidatorPlaceholder.prototype), \"componentDidMount\", _this2).call(_this2);\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      _get(_getPrototypeOf(InputValidatorPlaceholder.prototype), \"componentDidUpdate\", this).call(this, prevProps, prevState);\n\n      var dirty = !validator.isEmpty(this.parseValue()) || this.input.isFocused();\n\n      if (prevState.dirty !== dirty) {\n        this.setState({\n          dirty: dirty\n        });\n        this.animate(dirty);\n      }\n    }\n  }, {\n    key: \"getLabelStyle\",\n    value: function getLabelStyle() {\n      return {\n        fontSize: new Animated.Value(this.styles.fontSize),\n        top: new Animated.Value(this.styles.top)\n      };\n    }\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      var valid = _get(_getPrototypeOf(InputValidatorPlaceholder.prototype), \"validate\", this).call(this, value);\n\n      var text = this.parseValue(value).trim();\n      var dirty = !validator.isEmpty(text) || this.input.isFocused();\n      var labelStyle = this.getLabelStyle();\n\n      if (valid === false && !this.props.required) {\n        labelStyle.color = Palette.danger;\n      } else if (!validator.isEmpty(text) && valid === true) {\n        labelStyle.color = Palette.success;\n      } else {\n        labelStyle.color = Palette.normal;\n      }\n\n      this.animate(dirty);\n      this.setState({\n        labelStyle: labelStyle,\n        dirty: dirty\n      });\n      return valid;\n    }\n  }, {\n    key: \"animate\",\n    value: function animate(dirty) {\n      var nextStyle = dirty ? DirtyStyle : CleanStyle;\n      var labelStyle = this.state.labelStyle;\n      var anims = Object.keys(nextStyle).map(function (prop) {\n        return Animated.timing(labelStyle[prop], {\n          useNativeDriver: true,\n          toValue: nextStyle[prop],\n          duration: 200\n        }, Easing.ease);\n      });\n      Animated.parallel(anims).start();\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus(event, refName) {\n      this.animate(true);\n      this.setState({\n        dirty: true\n      });\n\n      _get(_getPrototypeOf(InputValidatorPlaceholder.prototype), \"onFocus\", this).call(this, event, refName);\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur() {\n      if (validator.isEmpty(this.parseValue())) {\n        this.animate(false);\n        this.setState({\n          dirty: false\n        });\n      }\n\n      _get(_getPrototypeOf(InputValidatorPlaceholder.prototype), \"onBlur\", this).call(this, arguments);\n    }\n  }, {\n    key: \"renderLabel\",\n    value: function renderLabel() {\n      return React.createElement(Animated.Text, {\n        ref: \"label\",\n        pointerEvents: \"none\",\n        numberOfLines: this.props.numberOfLines,\n        style: [Style.label, this.props.labelStyle, this.state.labelStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 4\n        }\n      }, this.props.children, \" \", this.props.required ? \"(*)\" : \"\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: [Style.element, this.props.containerStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 4\n        }\n      }, this.renderLabel(), _get(_getPrototypeOf(InputValidatorPlaceholder.prototype), \"render\", this).call(this));\n    }\n  }]);\n\n  return InputValidatorPlaceholder;\n}(InputValidator);\n\nInputValidatorPlaceholder.propTypes = {\n  labelStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  containerStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array])\n};\nInputValidatorPlaceholder.defaultProps = {\n  placeholder: \"\",\n  containerstyle: {},\n  labelstyle: {}\n};\nexport default InputValidatorPlaceholder;","map":{"version":3,"sources":["/home/mira/Desktop/hotelhub_frontend/node_modules/react-native-input-validator/src/InputValidatorPlaceholder.js"],"names":["React","PropTypes","Palette","Style","CleanStyle","DirtyStyle","validator","InputValidator","InputValidatorPlaceholder","props","value","parseValue","dirty","isEmpty","styles","state","setState","labelStyle","getLabelStyle","prevProps","prevState","input","isFocused","animate","fontSize","Animated","Value","top","valid","text","trim","required","color","danger","success","normal","nextStyle","anims","Object","keys","map","prop","timing","useNativeDriver","toValue","duration","Easing","ease","parallel","start","event","refName","arguments","numberOfLines","label","children","element","containerStyle","renderLabel","propTypes","oneOfType","object","array","defaultProps","placeholder","containerstyle","labelstyle"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {Animated, Easing, /*TouchableOpacity,*/ View} from \"react-native\";\nimport {Palette, Style, CleanStyle, DirtyStyle} from \"../style\";\nimport validator from \"validator\";\nimport InputValidator from \"./InputValidator\";\n\n/**\n * Text Input Validator\n * @author Marco Cesarato <cesarato.developer@gmail.com>\n */\nclass InputValidatorPlaceholder extends InputValidator {\n\t/**\n\t * Constructor\n\t * @param props\n\t */\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tconst value = this.parseValue(this.props.value);\n\t\tconst dirty = !validator.isEmpty(value);\n\n\t\tthis.styles = dirty ? DirtyStyle : CleanStyle;\n\t\tthis.state = {\n\t\t\t...this.state,\n\t\t\tdirty: dirty,\n\t\t};\n\t}\n\n\t/**\n\t * Component did mount\n\t */\n\tcomponentDidMount() {\n\t\tthis.setState({labelStyle: this.getLabelStyle()}, () => {\n\t\t\tsuper.componentDidMount();\n\t\t});\n\t}\n\n\t/**\n\t * Component did update\n\t * @param prevProps\n\t * @param prevState\n\t */\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tsuper.componentDidUpdate(prevProps, prevState);\n\t\tconst dirty =\n\t\t\t!validator.isEmpty(this.parseValue()) || this.input.isFocused();\n\t\tif (prevState.dirty !== dirty) {\n\t\t\tthis.setState({dirty: dirty});\n\t\t\tthis.animate(dirty);\n\t\t}\n\t}\n\n\t/**\n\t * Get Label Style\n\t * @returns {{fontSize: *|AnimatedValue|AnimatedImplementation.Value, top: *|AnimatedValue|AnimatedImplementation.Value}}\n\t */\n\tgetLabelStyle() {\n\t\treturn {\n\t\t\tfontSize: new Animated.Value(this.styles.fontSize),\n\t\t\ttop: new Animated.Value(this.styles.top),\n\t\t};\n\t}\n\n\t/**\n\t * Validate\n\t * @param value\n\t * @returns {boolean}\n\t */\n\tvalidate(value = null) {\n\t\tconst valid = super.validate(value);\n\t\tconst text = this.parseValue(value).trim();\n\t\tconst dirty = !validator.isEmpty(text) || this.input.isFocused();\n\n\t\tlet labelStyle = this.getLabelStyle();\n\n\t\tif (valid === false && !this.props.required) {\n\t\t\tlabelStyle.color = Palette.danger;\n\t\t} else if (!validator.isEmpty(text) && valid === true) {\n\t\t\tlabelStyle.color = Palette.success;\n\t\t} else {\n\t\t\tlabelStyle.color = Palette.normal;\n\t\t}\n\n\t\tthis.animate(dirty);\n\t\tthis.setState({labelStyle: labelStyle, dirty: dirty});\n\n\t\treturn valid;\n\t}\n\n\t/**\n\t * Animate floating label\n\t * @param dirty\n\t */\n\tanimate(dirty) {\n\t\tlet nextStyle = dirty ? DirtyStyle : CleanStyle;\n\t\tlet labelStyle = this.state.labelStyle;\n\t\tlet anims = Object.keys(nextStyle).map((prop) => {\n\t\t\treturn Animated.timing(\n\t\t\t\tlabelStyle[prop],\n\t\t\t\t{\n\t\t\t\t\tuseNativeDriver: true,\n\t\t\t\t\ttoValue: nextStyle[prop],\n\t\t\t\t\tduration: 200,\n\t\t\t\t},\n\t\t\t\tEasing.ease,\n\t\t\t);\n\t\t});\n\n\t\tAnimated.parallel(anims).start();\n\t}\n\n\t/**\n\t * On Focus\n\t * @param event\n\t * @param refName\n\t */\n\tonFocus(event, refName) {\n\t\tthis.animate(true);\n\t\tthis.setState({dirty: true});\n\t\tsuper.onFocus(event, refName);\n\t}\n\n\t/**\n\t * On Blur\n\t */\n\tonBlur() {\n\t\tif (validator.isEmpty(this.parseValue())) {\n\t\t\tthis.animate(false);\n\t\t\tthis.setState({dirty: false});\n\t\t}\n\t\tsuper.onBlur(arguments);\n\t}\n\n\t/**\n\t * Render label\n\t * @returns {*}\n\t */\n\trenderLabel() {\n\t\treturn (\n\t\t\t<Animated.Text\n\t\t\t\tref=\"label\"\n\t\t\t\tpointerEvents={\"none\"}\n\t\t\t\tnumberOfLines={this.props.numberOfLines}\n\t\t\t\tstyle={[Style.label, this.props.labelStyle, this.state.labelStyle]}>\n\t\t\t\t{this.props.children} {this.props.required ? \"(*)\" : \"\"}\n\t\t\t</Animated.Text>\n\t\t);\n\t}\n\n\t/**\n\t * Render\n\t * @returns {*}\n\t */\n\trender() {\n\t\treturn (\n\t\t\t<View style={[Style.element, this.props.containerStyle]}>\n\t\t\t\t{this.renderLabel()}\n\t\t\t\t{super.render()}\n\t\t\t</View>\n\t\t);\n\t}\n}\n\nInputValidatorPlaceholder.propTypes = {\n\tlabelStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n\tcontainerStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n};\n\nInputValidatorPlaceholder.defaultProps = {\n\tplaceholder: \"\",\n\tcontainerstyle: {},\n\tlabelstyle: {},\n};\n\nexport default InputValidatorPlaceholder;\n"]},"metadata":{},"sourceType":"module"}